// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["tracing"]
}

// generator erd {
//     provider = "prisma-erd-generator"
//     output   = "../prisma/ERD.md"
//     theme    = "forest"
// }

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    directUrl    = env("DATABASE_URL_DIRECT")
    relationMode = "prisma"
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
    @@index([createdById])
}

/////////////////////////////
/// Next auth integration ///
/////////////////////////////
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    refresh_token_expires_in Int?
    access_token             String? @db.Text
    expires_at               Int?
    expires_in               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    error        String?
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Post          Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

//////////////////////////////
/// SRI data model         ///
//////////////////////////////

model Invoice {
    id             String     @id @default(cuid())
    invoiceNumber  String
    invoiceDate    DateTime
    totalAmount    Decimal
    subtotalAmount Decimal
    totalTax       Decimal
    isRUC          Boolean
    items          LineItem[]
    customer       Customer?  @relation(fields: [customerId], references: [id])
    customerId     String?
    company        Company?   @relation(fields: [companyId], references: [id])
    companyId      String?

    @@index([customerId])
    @@index([companyId])
}

model LineItem {
    id             String    @id @default(cuid())
    invoiceId      String
    description    String
    quantity       Int
    unitPrice      Decimal
    totalAmount    Decimal
    subtotalAmount Decimal
    totalTax       Decimal
    discount       Decimal
    taxRate        TaxRate   @relation(fields: [taxRateId], references: [id])
    invoice        Invoice   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
    taxRateId      String
    category       Category? @relation(fields: [categoryId], references: [id])
    categoryId     String?

    @@index([invoiceId])
    @@index([taxRateId])
    @@index([categoryId])
}

model TaxRate {
    id          String     @id @default(cuid())
    name        String
    rate        Decimal
    description String?
    items       LineItem[]
}

model Customer {
    id          String    @id @default(cuid())
    name        String
    description String?
    address     String?
    city        String?
    state       String?
    zip         String?
    country     String?
    phone       String?
    email       String?
    invoices    Invoice[]
}

model Company {
    id          String    @id @default(cuid())
    name        String
    description String?
    address     String?
    city        String?
    state       String?
    zip         String?
    country     String?
    phone       String?
    email       String?
    invoices    Invoice[]
}

model Category {
    id           String       @id @default(cuid())
    name         String
    color        String?
    icon         String?
    description  String?
    categoryType CategoryType
    items        LineItem[]
}

enum CategoryType {
    NEED
    WANT
}
